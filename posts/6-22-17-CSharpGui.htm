<div class="mdl-shadow--3dp" style="width: 80%; margin-left: 8%; background-color: white; padding: 10px; margin-bottom: 5%;">
    <h2 style="text-align: center;">Cross-Platform Chaos: C#'s Shortcoming</h2>
    <p style="text-align: left;">I want to start off by saying that c# is a great and useful language; but it has a few shortcomings. These often have to do with c#'s cross platform implementations. 
    Even then, most things work fine as both mono and dotnet are really well made. No, where C# falls short in being a viable crossplatform language seems to lie in its gui 
	toolkits (or lack thereof). I'm going to go through the different gui toolkits I could find and go through what I think their issues are. So lets get started.
	</p>
	<br>
	<hr/>
	<h3 style="text-align: center;">WinForms</h3>
	<p style="text-align: left;">
    Its winforms.
	But seriously, it looks and runs fairly poorly on any operating system other than windows. That is understandable however because winforms wasn't, as some of the later things in this article were, designed with cross platform in mind.
	</p><hr/>
	<h3 style="text-align: center;">GTK#</h3>
	<p style="text-align: left;">
	GTK# is ok. It isn't particularly <i>bad</i> as much as it is outdated/underdeveloped. GTK#, last I used it (roughly a year ago) is still using gtk2 even thought gtk3 has been around for a while now and gtk4 is on its way, yet gtk# has yet to
	update. GTK# really only suffers because of a lack of updates, which is unfourtunate because it has potential to be a great way of bridging windows/linux/osx gui gap for C#. 
    </p><hr/>
	<h3 style="text-align: center;">Eto Forms</h3>
	<p style="text-align: left;">
	What even is Eto? It seems like it would be an ok gui toolkit if it wasn't so strange. Basically Eto is a gui toolkit that is built on other gui toolkits, the idea being that it gets
	built with whatever toolkit is native to the system, so for instance if you build it on linux it would use gtk3, if you build on windows it would use WPF, etc etc.
	The problem I had with Eto was the strange issues with being tied fairly strongly to monodevelop. I've had issues getting monodevelop working on my pc (note: that was using the flatpak, the version in the AUR works fine) and even when I did setting Eto
	up didn't work very well. Overall the best of the bunch, as well the most interesting of all of them. I hope that in the future the devs could see it fit to move away from using monodevelop
	for a lot of things and maybe make their own standalone gui designers and such.</p><hr/>
	<h3 style="text-align: center;">Conclusion</h3>
	<p style="text-align: left;">
	Multiplatform C# could have been so good, but it's been just a bit too long for it to truly thrive. What C# needs is to be a proper compiled language much like C, C++ and even Rust; as  while
	there are things like dotnet core, having a jit defeats the entire point of having a compiled language in my opinion. The entire point of using a compiled language rather than a scripting language
	is becase you want there to be as little overhead as possible, you want something quick and snappy, and you want something that is stable.
	With things like a JVM or a dotnet core there is always a chance that there will be an issue with your installation of the vm/enviroment it runs in. This over all leads to a shaky experience at times.
	With proper cross platform C# proper crossplat gui toolkits will follow, though I don't see this happening anytime soon.
	<br></p>

	<button class="mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect" style="margin: 2%; text-align: center;" onclick="location.reload();">Back</button>
</div>